name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    
    #using env secrets is the prefered approach for CI/CD tools. AZ login only works for user accounts and not for service principals.
    env:
      ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
      ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Setup env
      run: |
        export GITHUB_OWNER="${GITHUB_REPOSITORY_OWNER}"
        env

    - name: Print ENV
      run: env

    # This should really be done against a remote backend like Terraform Cloud or an Azure Storage Account
    # Normally you don't download artifacts across workflow runs. Doing it this way is very brittle to get the latest state.  
    # I tried to mitigate this by only pulling from successful runs against main.
    - name: Download Terraform State
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: terraform.yml
        workflow_conclusion: success
        branch: main
        name: terraform.tfstate
      continue-on-error: true # since initially there won't be anything stored

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      
    - name: Publish Terraform State
      uses: actions/upload-artifact@v2.2.4
      with:
        name: terraform.tfstate
        path: terraform.tfstate

